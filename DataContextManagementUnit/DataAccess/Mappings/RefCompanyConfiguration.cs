//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 05.10.2020 13:35:37
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data.Entity.ModelConfiguration;

namespace DataContextManagementUnit.DataAccess.Contexts.Edi.Mapping
{

    public partial class RefCompanyConfiguration : EntityTypeConfiguration<RefCompany>
    {

        public RefCompanyConfiguration()
        {
            this
                .HasKey(p => p.Gln)
                .ToTable("REF_COMPANIES", "EDI");
            // Properties:
            this
                .Property(p => p.Gln)
                    .HasColumnName(@"GLN")
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None)
                    .IsUnicode(false);
            this
                .Property(p => p.Name)
                    .HasColumnName(@"NAME")
                    .IsRequired()
                    .HasMaxLength(512)
                    .IsUnicode(false);
            this
                .Property(p => p.City)
                    .HasColumnName(@"CITY")
                    .HasMaxLength(256)
                    .IsUnicode(false);
            this
                .Property(p => p.IdContractor)
                    .HasColumnName(@"ID_CONTRACTOR");
            this
                .Property(p => p.Kpp)
                    .HasColumnName(@"KPP")
                    .HasMaxLength(256)
                    .IsUnicode(false);
            this
                .Property(p => p.Inn)
                    .HasColumnName(@"INN")
                    .HasMaxLength(256)
                    .IsUnicode(false);
            this
                .Property(p => p.RegionCode)
                    .HasColumnName(@"REGION_CODE")
                    .HasMaxLength(256)
                    .IsUnicode(false);
            this
                .Property(p => p.Street)
                    .HasColumnName(@"STREET")
                    .HasMaxLength(256)
                    .IsUnicode(false);
            this
                .Property(p => p.House)
                    .HasColumnName(@"HOUSE")
                    .HasMaxLength(256)
                    .IsUnicode(false);
            this
                .Property(p => p.Flat)
                    .HasColumnName(@"FLAT")
                    .HasMaxLength(256)
                    .IsUnicode(false);
            this
                .Property(p => p.PostalCode)
                    .HasColumnName(@"POSTAL_CODE")
                    .HasMaxLength(256)
                    .IsUnicode(false);
            this
                .Property(p => p.LastSync)
                    .HasColumnName(@"LAST_SYNC")
                    .HasPrecision(0);
            this
                .Property(p => p.ParentGln)
                    .HasColumnName(@"PARENT_GLN")
                    .HasMaxLength(16)
                    .IsUnicode(false);
            this
                .Property(p => p.IdDbFilial)
                    .HasColumnName(@"ID_DB_FILIAL");
            // Associations:
            this
                .HasMany(p => p.MapPriceTypes)
                    .WithRequired()
                .HasForeignKey(p => p.GlnCompany)
                    .WillCascadeOnDelete(false);
            this
                .HasMany(p => p.ShipToOrders)
                    .WithRequired(c => c.ShipTo)
                .HasForeignKey(p => p.GlnShipTo)
                    .WillCascadeOnDelete(false);
            this
                .HasMany(p => p.BuyerOrder)
                    .WithRequired(c => c.Buyer)
                .HasForeignKey(p => p.GlnBuyer)
                    .WillCascadeOnDelete(false);
            this
                .HasMany(p => p.SellerOrders)
                    .WithRequired(c => c.Seller)
                .HasForeignKey(p => p.GlnSeller)
                    .WillCascadeOnDelete(false);
            this
                .HasMany(p => p.SenderOrders)
                    .WithRequired(c => c.Sender)
                .HasForeignKey(p => p.GlnSender)
                    .WillCascadeOnDelete(false);
            this
                .HasMany(p => p.Companies)
                    .WithOptional(c => c.Filials)
                    .WillCascadeOnDelete(false);
            OnCreated();
        }

        partial void OnCreated();

    }
}
