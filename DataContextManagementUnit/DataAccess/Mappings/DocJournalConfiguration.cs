//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 01.10.2020 15:53:46
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data.Entity.ModelConfiguration;

namespace DataContextManagementUnit.DataAccess.Contexts.Abt.Mapping
{

    public partial class DocJournalConfiguration : EntityTypeConfiguration<DocJournal>
    {

        public DocJournalConfiguration()
        {
            this
                .HasKey(p => p.Id)
                .ToTable("DOC_JOURNAL", "ABT");
            // Properties:
            this
                .Property(p => p.Id)
                    .HasColumnName(@"ID")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            this
                .Property(p => p.Code)
                    .HasColumnName(@"CODE")
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);
            this
                .Property(p => p.Comment)
                    .HasColumnName(@"COMMENTS")
                    .HasMaxLength(128)
                    .IsUnicode(false);
            this
                .Property(p => p.DocDatetime)
                    .HasColumnName(@"DOC_DATETIME")
                    .IsRequired()
                    .HasPrecision(0);
            this
                .Property(p => p.IdDocType)
                    .HasColumnName(@"ID_DOC_TYPE")
                    .IsRequired();
            this
                .Property(p => p.IdInstanceSender)
                    .HasColumnName(@"ID_INSTANCE_SENDER");
            this
                .Property(p => p.IdInstanceReciepient)
                    .HasColumnName(@"ID_INSTANCE_RECIEPIENT");
            this
                .Property(p => p.IdInstanceOwner)
                    .HasColumnName(@"ID_INSTANCE_OWNER")
                    .IsRequired();
            this
                .Property(p => p.IdDocMaster)
                    .HasColumnName(@"ID_DOC_MASTER");
            this
                .Property(p => p.ErrorStatus)
                    .HasColumnName(@"ERROR_STATUS")
                    .HasMaxLength(128)
                    .IsUnicode(false);
            this
                .Property(p => p.ActStatus)
                    .HasColumnName(@"ACT_STATUS")
                    .IsRequired();
            this
                .Property(p => p.LockStatus)
                    .HasColumnName(@"LOCK_STATUS")
                    .IsRequired();
            this
                .Property(p => p.UserName)
                    .HasColumnName(@"USER_NAME")
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            this
                .Property(p => p.CreateInvoice)
                    .HasColumnName(@"CREATE_INVOICE")
                    .IsRequired();
            this
                .Property(p => p.DeliveryDate)
                    .HasColumnName(@"DELIVERY_DATE")
                    .HasPrecision(0);
            this
                .Property(p => p.Deleted)
                    .HasColumnName(@"DELETED")
                    .IsRequired();
            this
                .Property(p => p.UpdatedPrice)
                    .HasColumnName(@"UPDATED_PRICE");
            this
                .Property(p => p.PayDelay)
                    .HasColumnName(@"PAY_DELAY");
            // Associations:
            this
                .HasMany(p => p.DocJournals)
                    .WithOptional(c => c.DocMaster)
                .HasForeignKey(p => p.IdDocMaster)
                    .WillCascadeOnDelete(false);
            this
                .HasMany(p => p.Details)
                    .WithRequired(c => c.DocJournal)
                .HasForeignKey(p => p.IdDoc)
                    .WillCascadeOnDelete(true);
            this
                .HasRequired(p => p.DocGoods)
                    .WithRequiredPrincipal(c => c.DocJournal)
                    .WillCascadeOnDelete(true);
            this
                .HasMany(p => p.DocGoodsDetailsIs)
                    .WithRequired(c => c.DocJournal)
                .HasForeignKey(p => p.IdDoc)
                    .WillCascadeOnDelete(true);
            this
                .HasOptional(p => p.DocGoodsI)
                    .WithRequired(c => c.DocJournal)
                    .WillCascadeOnDelete(true);
            OnCreated();
        }

        partial void OnCreated();

    }
}
